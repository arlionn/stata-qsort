
  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   13.1   Copyright 1985-2013 StataCorp LP
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
                                      College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

Single-user Stata perpetual license:
       Serial number:  301306294610
         Licensed to:  Mauricio Caceres
                       mauricio.caceres.bravo@gmail.com

Notes:
      1.  Command line editing disabled
      2.  Stata running in batch mode

Note:  Your site can add messages to the introduction by editing the file
       stata.msg in the directory where Stata is installed.

. do tmp.do 

. version 13

. clear all

. set more off

. set varabbrev off

. * set seed 42
. set seed 1729

. set linesize 128

. 
. * sysuse auto,  clear
. * set rmsg on
. * clear
. * set obs 2000000
. * * set obs 100000
. * gen x = floor(rnormal())
. * gen y = rnormal()
. * qui ralpha rstr, l(5)
. * qui ralpha rst2, l(3)
. * replace rstr = rstr + "s"
. * replace rst2 = rst2 + "someting longer"
. * gen double id2 = _n
. * gen byte dummy = runiform()
. * gen idx = _n
. * save /tmp/qsort, replace
. 
. set rmsg on
r; t=0.00 20:36:53

. * use /tmp/qsort in 1/150000, clear
. use /tmp/qsort, clear
r; t=0.04 20:36:53

. * gen testing = "This is a very long string; I don't see how mem wouldn't go through the roof."
. * desc
. * expand 3
. * replace dummy = runiform()
. sort rstr x rst2 y dummy
r; t=2.54 20:36:55

. cap drop st_idx
r; t=0.00 20:36:55

. gen st_idx = _n
r; t=0.06 20:36:55

. sort idx
r; t=1.82 20:36:57

. cap noi qsort rstr x rst2 y dummy, v b
plugin call qsort_plugin rstr x rst2 y dummy id2 idx st_idx, sort
Sort by 2 strings, 3 numeric
(memory overhead > 171.00MiB)
        Sort (1): Read in copy of data; 0.280 seconds.
        Sort (2): Sorted array; 1.492 seconds.
        Sort (3): Wrote back sorted data; 0.455 seconds.
r; t=2.24 20:37:00

. * l in 1/10
. assert st_idx == _n
r; t=0.04 20:37:00

. 
end of do-file
r; t=0.00 20:37:00
