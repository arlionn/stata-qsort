
  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   13.1   Copyright 1985-2013 StataCorp LP
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
                                      College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

Single-user Stata perpetual license:
       Serial number:  301306294610
         Licensed to:  Mauricio Caceres
                       mauricio.caceres.bravo@gmail.com

Notes:
      1.  Command line editing disabled
      2.  Stata running in batch mode

Note:  Your site can add messages to the introduction by editing the file
       stata.msg in the directory where Stata is installed.

. do tmp.do 

. version 13

. clear all

. set more off

. set varabbrev off

. * set seed 42
. set seed 1729

. set linesize 128

. 
. * sysuse auto,  clear
. * set rmsg on
. * clear
. * set obs 2000000
. * * set obs 100000
. * gen x = floor(rnormal())
. * gen y = rnormal()
. * qui ralpha rstr, l(5)
. * qui ralpha rst2, l(3)
. * replace rstr = rstr + "s"
. * replace rst2 = rst2 + "someting longer"
. * gen double id2 = _n
. * gen byte dummy = runiform()
. * gen idx = _n
. * save /tmp/qsort, replace
. 
. * set rmsg on
. * * use /tmp/qsort in 1/150000, clear
. * use /tmp/qsort, clear
. * * gen testing = "This is a very long string; I don't see how mem wouldn't go through the roof."
. * * desc
. * * expand 3
. * * replace dummy = runiform()
. * sort rstr x rst2 y dummy
. * * cap drop st_idx
. * * gen st_idx = _n
. * sort idx
. * * sort x y dummy
. * * sort idx
. * sort x idx
. * sort idx
. *
. * cap noi qsort rstr x rst2 y dummy, v b
. * cap noi qsort idx, v b
. * * cap noi qsort x y dummy, v b
. * * cap noi qsort idx, v b
. * cap noi qsort x idx, v b
. * * cap noi qsort idx, v b
. * * l if st_idx != _n
. * * assert st_idx == _n
. 
. ***********************************************************************
. *                                gsort                                *
. ***********************************************************************
. 
. set rmsg on
r; t=0.00 2:03:55

. use /tmp/qsort, clear
r; t=0.05 2:03:55

. * gsort -rstr x rst2 -y dummy
. * gsort idx
. * gsort x -y -dummy
. * gsort idx
. * gsort x -idx
. * gsort idx
. 
. qsort -rstr x rst2 -y dummy, v b
(memory overhead > 155.00MiB)
        Sort (1): Read in copy of data; 0.296 seconds.
        Sort (2): Sorted array; 1.566 seconds.
        Sort (3): Wrote back sorted data; 0.463 seconds.
r; t=2.71 2:03:57

. qsort idx, v b
(memory overhead > 155.00MiB)
        Sort (1): Read in copy of data; 0.332 seconds.
                Step (2.1) counting sort: min = 1, max = 2,000,000
        Sort (2): Sorted bijection; 0.307 seconds.
        Sort (3): Wrote back sorted data; 0.984 seconds.
r; t=2.37 2:04:00

. qsort x -y -dummy, v b
(memory overhead > 155.00MiB)
        Sort (1): Read in sort vars; 0.168 seconds.
        Sort (2): Sorted numeric array; 0.455 seconds.
        Sort (1): Read in rest of data; 0.443 seconds.
        Sort (3): Wrote back sorted data; 0.151 seconds.
r; t=1.32 2:04:01

. qsort idx, v b
(memory overhead > 155.00MiB)
        Sort (1): Read in copy of data; 0.444 seconds.
                Step (2.1) counting sort: min = 1, max = 2,000,000
        Sort (2): Sorted bijection; 0.413 seconds.
        Sort (3): Wrote back sorted data; 1.222 seconds.
r; t=2.25 2:04:03

. qsort x -idx, v b
(memory overhead > 155.00MiB)
        Sort (1): Read in copy of data; 0.345 seconds.
                Step (2.1) radix sort: loops = 2, bits = 16, shift = 65,536
        Sort (2): Sorted bijection; 0.172 seconds.
        Sort (3): Wrote back sorted data; 0.286 seconds.
r; t=1.01 2:04:04

. qsort idx, v b
(memory overhead > 155.00MiB)
        Sort (1): Read in copy of data; 0.299 seconds.
                Step (2.1) counting sort: min = 1, max = 2,000,000
        Sort (2): Sorted bijection; 0.047 seconds.
        Sort (3): Wrote back sorted data; 0.174 seconds.
r; t=0.67 2:04:05

. * l if st_idx != _n
. * assert st_idx == _n
. 
end of do-file
r; t=0.00 2:04:05
